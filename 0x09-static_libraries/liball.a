!<arch>
0-isupper.c/    0           0     0     644     206       `
#include "main.h"

/**
 * _isupper - check if char is uppercase
 * @c: the char
 * Return: 1 if true and 0 if false
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     323       `
#include "main.h"

/**
 * _memset - fills the first memory with given values
 * Return: pointer to th memory
 * @s: starting address
 * @b: the desired value
 * @n: number of bytes to be changed
 */

char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     337       `
#include "main.h"

/**
 * *_strcat - to concartinate two strings.
 * @src: first string
 * @dest: second string
 * Return: dest
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     563       `
#include "main.h"

/**
 * _atoi - converts string to integer
 * @s: the string
 * Return: integer
 */

int _atoi(char *s)
{
	unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;
		if (*(s + count) == '-')

			pn *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;
		}
		count++;
	}
	for (i = count - size; i < count; i++)
	{
		oi = oi + ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (oi * pn);
}

1-isdigit.c/    0           0     0     644     209       `
#include "main.h"

/**
 * _isdigit - check if char is digit or not
 * @c: the char
 * Return: 1 if true and 0 if false
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     322       `
#include "main.h"

/**
  *_memcpy - copies n bytes from memory area
  * @src: memory area
  * @dest: memory area to copy to
  * @n: number of bytes
  * Return: dest
  */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i = n;
	int r = 0;

	for (; r < i; r++)
	{
		dest[r] = src[r];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     388       `
#include "main.h"

/**
 * _strncat - concartinate but using at most n bytes.
 * @src: string
 * @dest: string 2
 * @n: number of bytes
 * Return: pointer to dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     244       `
#include "main.h"

/**
  * _strchr - Entry point
  * @s: input
  * @c: input
  * Return: always 0 (success)
  */

char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     208       `
#include "main.h"

/**
 * _strlen - calculates the length of a string
 * @s: the string
 * Return: length
 */

int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		len++;
		s++;
	}
	return (len);
}
2-strncpy.c/    0           0     0     644     320       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @src: copy from
 * @dest: copy to
 * @n: integer
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;
	while (i < n && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     215       `
#include "main.h"

/**
 *  _islower -> checks if the character is lowercase
 *  @c: a character argument
 *  Return: return 1 and 0 depending on condition
 */
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     212       `
#include "main.h"

/**
 * _puts - prints a string followed by a new line.
 * @str: string to print
 * Return: Void.
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str++);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     296       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: string 1
 * @s2: string 2
 * Return: 0 (success)
 */

int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;
	while (s1[i] !=  '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     406       `
#include "main.h"

/**
  * _strspn - gets the length of a prefix substring.
  * @s: input
  * @accept: input
  * Return: Always 0 (success)
  */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0;  accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}
4-isalpha.c/    0           0     0     644     239       `
#include "main.h"

/**
 * _isalpha - checks for alphabetical letters
 * @c: a charter to be checke on
 * Return: returns 0 or 1 depending on condition
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     319       `
#include "main.h"

/**
  * _strpbrk - searches for any of a set of bytes
  * @s: the string
  * @accept: input
  * Return: Always 0 (success)
  */

char *_strpbrk(char *s, char *accept)
{
	int k;

	while (*s)
	{
		for (k = 0; accept[k]; k++)
		{
			if (*s == accept[k])
				return (s);
		}
		s++;
	}
	return ('\0');
}


5-strstr.c/     0           0     0     644     372       `
#include "main.h"

/**
  * _strstr - Entry point
  * @haystack: input
  * @needle: input
  * Return: Always 0 (success)
  */

char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}
		if (*p == '\0')
			return (haystack);
	}
	return (0);
}
6-abs.c/        0           0     0     644     196       `
#include "main.h"

/**
 * _abs - comute the absolute value of an interger
 * @t: The integer
 * Return: The absolute value
 */

int _abs(int t)
{
	if (t >= 0)
		return (t);
	else
		return (-t);
}
9-strcpy.c/     0           0     0     644     306       `
#include "main.h"

/**
 * _strcpy - copies the string pointed to by src
 * @dest: destination
 * @src: source
 * Return: String
 */

char *_strcpy(char *dest, char *src)
{
	int len = 0;

	while (*(src + len) != '\0')
	{
		*(dest + len) = *(src + len);
		len++;
	}

	*(dest + len) = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

